react dom is a bridge between react and browsers
In cdn we have 2 links
1.core react link 
2.react-dom-link

 const heading= React.createElement("h1", {}, "Hello world");
 const root=ReactDOM.createRoot(document.getElementById("root"));
    root.render(heading);

{}==>It is used for providing attributes to the elements or tags
{id:"heading"}
React.createElement() is an object  ->it is used to create a html elements.
heading is a react element.
render method converts the object{React.createElement()}  into h1 tag and put it on the browser.


why we should not place reactdom cdn before react cdn?
ChatGPT
When using React and ReactDOM with CDN links in a web page, it is important to include the React CDN before the ReactDOM CDN. Here's why:

React is the core library for building user interfaces, and ReactDOM is the package specifically responsible for rendering React components into the browser DOM (Document Object Model). ReactDOM depends on React to be available before it can work correctly.

By including React before ReactDOM, you ensure that the React library is loaded and available in the global scope before ReactDOM attempts to use it. This ensures that ReactDOM can access and utilize the necessary functions and components provided by React.

If you were to include ReactDOM before React, you would likely encounter errors because ReactDOM would not be able to find the required React functions and components it relies on.

To summarize, the correct order is:

html
Copy code
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.development.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.development.js"></script>
By following this order, you ensure that React is loaded first, followed by ReactDOM, allowing your React components to be rendered correctly.



Git and github are different.
Github is a place where we can host repositories.
Git is a version control system that helps manage changes in files and directories, while GitHub is a web-based platform that provides hosting, collaboration, and additional features for Git repositories. Git is the underlying technology, while GitHub is a service built around Git.

git remote add origin https://github.com/Gouthami-D/reactjs-practice.git       ==============> to set up our local with remote repository


npm 
===
npm manages the packages but does not stand for node package manager.
It is a repository which containes all the packages.

package.json:
============
It contains all the configuration for npm.It keeps a track of what version of package is installed into our system (It contains ^caret symbol like ^2.9.1(means it can contain minor version changes like 2.9.2,2.9.3 etc upto 2.9.9))
It is in a json format like name,description, version etc
packages are also known as dependencies which we install in our application through npm repository.
npm will take care of the version of the package which we are using in the package.json.

packagelock.json:
=================
It keeps track of the exact version of all the packages or dependencies  which are installed into our system.


Bundler:
=========
Before we send our code to production we need to minify,compress,bundle,clean our css,js,html files using bundler.
Bundler helps us to bundle the code.So, that we can send our code to production.
Some of the examples of bundlers are webpack,parcel,rollup etc..


Dependencies:
=============
There are two types of dependencies an app can have.
npm install -D parcel --->DEV dependency(This dependency is used in development phase )
A dev dependency (short for development dependency) refers to a package or library that is required during the development process but is not necessary for the production or runtime environment of the software.

npm i bootstrap------>NORMAL dependency  (THis dependency is used in production also)

Differences between dev dependency and normal dependency:
=========================================================
It's important to distinguish between dev dependencies and regular dependencies (also known as runtime dependencies or production dependencies), which are the packages or libraries necessary for the software to run correctly in the production environment.
Regular dependencies are typically specified separately from dev dependencies to ensure that only the necessary dependencies are installed and included in the production environment.

"devDependencies": {
    "parcel": "^2.9.1"
  }
^ (caret)--> It upgrades to any minor version changes.The caret symbol is used to specify a version range that allows for non-breaking updates.
~ (tilde)--> It upgrades to any major version changes.The tilde symbol is used to specify a version range that allows for patch updates.



NodeModules:
===========
Node modules are the 
If we install one package we get so many nodemodules for that package why?
Because for example if we install bootstrap we get so many other packages along with bootstrap.Because bootstrap is a project which is dependent on some other packages.These other packages depend on other packages to complete the application.This type of dependency is called as "Transitive dependency".So, we have so many packages.

If we delete our nodemodules in our application, we can recreate it again by using package and packagelock.json because these files stores the information about all the dependencies.
we can get the node modules again by npm install
				     ============
.gitignore:
===========
we can push nodemodules to the gitignore file
/node_modules -> git will ignore these nodemodules and takes all the other files										


npx parcel index.html ==>Command used to execute the parcel with entry point as index.html(called as src).
parcel goes into the index.html and builds a development build for our application and hosts our application on the localhost:1234

Difference between installing and executing a package?


====***=====
To bring react into our application we used "cdn links" earlier.
But using cdn links is not a preferred way to bring react and reactdom into our application.
"BUT WHY?"
==========
<script crossorigin 
 src="https://unpkg.com/react@18/umd/react.development.js">
</script>

1.This cdn link makes another network call to unpkg.com it would be easier for us if we have react as a dependency in package.json(nodemodules) to avoid the network call.

2.src="https://unpkg.com/react@18/umd/react.development.js" in this we have react@18 if in future the version changes we need to change the url for updation statically.If we have that as a dependency .

Parcel
======

Parcel creates seperate production  and development bundles:
----------------------------------------------------------
Development build is stored in dist folder.
command:npx parcel index.html 
When we run the command(execute) parcel will generates the development build of our project and will host onto localhost:1234. when we refresh our page it uses parcel-cache to update our page using hot module replacement.
-------- -----------------------
Production build is stored in dist folder
command:npx parcel build index.html
when we run the command parcel will generates the production build in dist folder and 3 files will be build 1 html,1 js, 1 css file.
These 3 files will contain all the code of your application and it is the production ready code


Conclusion:
============
Why react is fast?
Because react contains all the tools which helps it to run in short span like parcels,bundlers,dist,
parcel-cache, all these makes the react app faster. These all other packages have transitive dependencies.

**--To avoid the command to type always in the terminal --**
we write in package.json in scripts as 
"scripts": {
    "start":"parcel index.html",
     "build":"parcel build index.html",
     "test": "jest"
  },

  we execute our application directly by 
  == npm run start (or) npm start  ==
  **To build the application npm run build** npm build doesn't work


  Episode 3
  ==========
React.createElement  is an =>object=>when root.render is called ReactDom takes the object and converts into html and push it to the browser
React.createElement =>object=> HTMLElment(render)=>object is converted to html in the DOM by reactdom

const heading=React.createElement("h1",{id:"heading"},"This is reactjs");
const root=ReactDOM.createRoot(document.getElementById("root"));
root.render(heading)
console.log(heading)

rendered
========
replaces everything inside root.

Replaces everything inside the root by heading

 <div id="root">
    <h1>React js tutorial</h1> --------------->replaced by heading
</div>


JSX is a HTML like (or) XML like syntax but not html or xml
===========================================================
const heading = <h1>This is reactjs</h1> is a jsx syntax for createElement similar to react

const heading=React.createElement("h1",{id:"heading"},"This is reactjs"); and const heading = <h1>This is reactjs</h1> are similar.

Javascript understands ECMAscript(es6)
Babel transpiles the jsx code to browser understandable language

differences between jsx and html
1. In html we use class  and in jsx we use className .
2.If we want to provide attributes in jsx we need to use camelCase like className="hello" (className is camel case)

React functional components
===========================
It is a normal js function which returns jsx or function which returns a react element. 
const HeadingComponent=()=>{
  return <h1>React functional component</h1>
}

component composition
======================
placing one component inside the other

const Navbar=()=>{
    return <h1>Navbar</h1>
}

const Heading=()=>{
  return <h1>hello</h1>
  <Navbar/>  --->another component
}
root.render(<Heading/>)


jsx must and should have only one root element

React Fragment
==============
It behaves like an empty tag

Inline styling in reactjs:
==========================
<div className="card" style={{backgroundColor:"green"}}>
<h1>Hello</h1>
</div>

first {} =>indicates inside there is some javascript code
second{} =>indicates that is an javascript object.

Props:
=====
Component is just a normal javascript function.
Props are just the normal arguments to a function.
when we want to dynamically pass some data to the component we pass as props.

 
 Config Driven UI:
 =================
A configuration-driven UI is an approach where the layout, structure, and behavior of the user interface are defined by a configuration file or data instead of hard-coding them in the application code. 
This allows for easy customization and dynamic changes to the UI without requiring modifications to the underlying codebase.


Controlling the UI with data by using config(data).


Map function:
=============
MAp function is used to iterate over array of objects in tha data
const response = [
  { id: 1, name: 'John', age: 25 },
  { id: 2, name: 'Jane', age: 30 },
  { id: 3, name: 'Bob', age: 35 }
];

{response.map((item)=>{

})}

index.js:1 Warning: Each child in a list should have a unique "key" prop.
==========================================================================
unique key or id should be important during map because without key whenever a new element is inserted in the beginning of the dom.  it re-renders the whole elements in the dom again. 
But if we have key for every element it check the id's or keys .It gets inserted at the specific place .

folder structure:
=================
If any hard-coded data is there in our componenets just place it in seperate folder called utils or common.
In that folder name the file as constants.js with lowercase because it is not a component.

Exports"
=======
Named export:If we want to export multiple things  from the same file we use named export.
named export ehile importing must be wrapped up in curly braces.
import { resList } from '../utils/Data'

Example:
========
export const LOGO_URL="https://img.freepik.com/free-vector/cute-girl-chef-holding-tray-platter-plate-banner-logo-cartoon-art-illustration_56104-879.jpg?w=826&t=st=1686659942~exp=1686660542~hmac=c7ac8ece954acfe44f309c426349010d3d15ccaa4e0496a5b42fe8bf1601200f"

Default export:With default export we can export only single thing or component through a single file

Example:
========
export default Header;=>at the end of the file

Event Handlers:
===============
Onclick takes the call back as an argument .This callback function is called when a button is clicked.

React Hooks:
=============
A hook is a normal js function.

UseState:
========
It is a state variable .Because,
It maintains the state of our componenet.
when we call the useState function it gives the state variable and we recieve that variable inside the array.
const[myvariable]=useState()
we pass the initial value or default value in useState([]) for example empty array. And that default value becomes the intial value for the variable(myvariable).
and we use that variable normally with the name while mapping or looping
It is used for creating a local state variable inside the functional components.

 const[resList]=useState([
        {
            "data": {
                "id": "10069",
                "name": "Shree Santosh Family Dhaba",
                "cloudinaryImageId": "pro9wrdscz7nd8ezzrwg",
                "cuisines": [
                    "Punjabi",
                    "North Indian",
                    "Chinese",
                    "Tandoor"
                ],
                "costForTwoString": "₹400 FOR TWO",
                "slaString": "37 MINS",
                "address": "3-5-890, Paras Chambers, Telugu Academy Lane,Himayath Nagar, Hyderabad",
                "avgRating": "4.2",
    
            },
            
        },
        {
            "data": {
                "id": "10069",
                "name": "Shree Santosh Family Dhaba",
                "cloudinaryImageId": "pro9wrdscz7nd8ezzrwg",
                "cuisines": [
                    "Punjabi",
                    "North Indian",
                    "Chinese",
                    "Tandoor"
                ],
                "costForTwoString": "₹400 FOR TWO",
                "slaString": "37 MINS",
                "address": "3-5-890, Paras Chambers, Telugu Academy Lane,Himayath Nagar, Hyderabad",
                "avgRating": "4.0",
    
            },
            
        }
    ])
 Important
 ==========
 When ever the state variable updates react re-renders the component

React state variable vs normal js variable
===========================================

There are several differences between a normal JavaScript variable and a React state variable:

Declaration and Initialization: In JavaScript, you can declare and initialize a normal variable using the var, let, or const keywords. In React, state variables are declared and initialized using the useState hook.

Mutability: In JavaScript, normal variables can be mutated directly by assigning new values to them. In React, state variables are immutable, meaning you cannot directly assign new values to them. Instead, you update state variables using the setState function provided by the useState hook.

Component Re-rendering: When a state variable in React changes its value using the setState function, the component that owns the state variable will re-render to reflect the updated state. Normal variables in JavaScript do not trigger component re-renders.

Scope: Normal JavaScript variables have function or block scope, depending on how they are declared using var, let, or const. React state variables have component scope and are accessible only within the component that declares them.

Asynchronous Updates: When updating a state variable in React using setState, the new value is not immediately available for use within the same function. React batches state updates for performance reasons, so you can't rely on the updated value immediately. JavaScript variables, on the other hand, are updated synchronously.

It's important to note that React state variables are specifically designed for managing component state within the React framework. They provide a way to store and update values that can trigger component re-renders. Normal JavaScript variables, on the other hand, are used for general-purpose data storage and manipulation within JavaScript applications.


React Reconciliation:(reconciliation means whenever something changes on UI)
=====================
It is known as React Fiber.React fiber is nothing but its a new of finding the diff(difference) between two virtual doms(olad and new)( which are in the form of objects) and updating the dom.
It is introduced in React16 to update the dom.


Virtual dom:it is a representation of real DOM 
============
React.createElement() is a virtual dom.and it is an object as mentioned in line 373.
Real dom is what we see in the elements tab in inspect element with all the tags <div><h1></h1></div>.


const heading= React.createElement("h1", {}, "Hello world");
 const root=ReactDOM.createRoot(document.getElementById("root"));
    root.render(heading);

{}==>It is used for providing attributes to the elements or tags
{id:"heading"}
React.createElement() is an object  ->it is used to create a html elements.
heading is a react element.
render method converts the object{React.createElement()}  into h1 tag and put it on the browser.

API calls in reactjs
====================
We can fetch the data from backend using 2 approaches

Page loads ===> call API(wait for data to come for some 1000ms ) ===> Render it on UI

Page loads ===> Render skeleton ===> call API(wait for data to come) ===> Render it on UI
in react render cycles are very fast.


UseEffect Hook:
===============
It is a function which takes 2 arguments 
1.Arrow function which is a Call back function 
2.Dependency array
useEffect(()=>{},[])
  1.if no dependency array is present => useEffect is called on every render
  2.if there is empty dependency array =>useEffect is called on initial render of the component
  3.if there is dependency inside the dependency array=>useEffect is called everytime whenvever the depenedency is updated. 


The call back function is called after the component is rendered (Body is rendered (Dom or component)).
Immediately after the component is rendered  on the DOM useEffect is called and the first argument arow function is executed.


****whenever a API call is made through useEffect hook to display the data on the UI we use state variables(useState hook)
We fetch the data from the api and we store it in a local state variable whenever the statevariable updates the UI upddates.****

CORS
====

UseState:
=========
Whenever the state variable updates whole component is rendered (reconciliation occurs).

React router dom:
-----------------
createBrowserRouter  provides the configuration
routerProvider provides the routing configuration to our application

For errors also we can use errorElement to display any routes which is not defined in our application

import { createBrowserRouter,RouterProvider } from "react-router-dom";
const appRouter=createBrowserRouter([
    {
    path: "/",
    element: <App />,
    errorElement:<Error/>
    },
    {
      path: "/about",
      element: <About />,
    },
    {
      path: "/contact",
      element: <Contact />
    },
  ])
  const root=ReactDOM.createRoot(document.getElementById("root"));
root.render(<RouterProvider router={appRouter}/>)

<Link>:
=======
To navigate from one page to another page we should not use <a></a> tag because the whole app gets refreshed.
TO avoid that app reload we use <Link></Link> tag 
<Link> just refreshes the component.

Single page application:
========================
Single page i.e, One page just the components get interchanged.

Routing types:
==============
Client side routing:
Server side rendering: Here we fetch the routes through the api call.


Dynamic routing :
================
useParams(): By using this hook from react-router-dom we pass the route dynamically.


Class Components:
================
class is a keyword which is used to create class components.
extends React.Component it explains that the created component is a class component.
render() will return the jsx.

props in class component:
=========================

import React from "react";

class UserClass extends React.Component {
    constructor(props){
        super(props)
        console.log(props);

        this.state={
            count:0
        }
    }
    render(){

        const {name,email,designation} =this.props
        const {count}=this.state

        return(
            <>
            {/* <h1>Count: {this.state.count}</h1> before destructuring */}
            <h1>Count: {count}</h1>
            <h2>{name}</h2>
            <h2>{email}</h2>
            <h2>{designation}</h2>
            </>
        )
    }
}

export default UserClass


state in class components:
==========================
We will write multiple state variables in this.state{}.
This is a global object which holds all the states in the component.

NEVER UPDATE STATE VARIABLES DIRECTLY. LIKE this.state.count=this.state.count+1 

whenever react comes to the setState() function to update the value it goes to the this.state{} object and updates only the variables in the function.
And does not touches all the variables in the global state i.e, this.state.

state in functional components:
==============================
Here we write seperate state variables for every state variable.


LifeCycle of  a component:
==========================
Component Did Mount():
=====================
How a component is mounted or loaded on DOM or webpage?

whenever <About/> component is loaded on the dom it renders the jsx inside the About page.
IN <About/> component there is another component called UserClass which is a class based component.
Whenever it reads the class based component an instance is created.After creating an instance constructor is called and then render is called.

<About/>=====><UserClass/>=======>constructor======>render()  

when we have both parent class component and child class component
<Parent class component> constructor,render,[componentDidMount-->called after (1)(2)]
  <Child class component/>constructor,render,[componentDidMount()-->(1)]
<Parent>

<Parent/>class Component==>parent constructor ==>parent render ===> child constructor ===> child render ==>child componentDidMount ==> parent ComponentDidMOunt


when we have both parent class component and child class component
<Parent class component>   [constructor,render]

-------render phase for children begins -------------

    <Child1 class component/>[constructor,render]
    <Child2 class component/>[constructor,render]

-------render phase for children ends-----------------    

    After this steps diff is calculated and reconciliation triggers and it is batched and dom is updated for both the components at a time.Performance is optimised by this batching.
    <DOM UPdated -IN single batch> 

-------commit phase for children begins---------

  child1 componentDidMount()
  child2 componentDidMount()

-------commit phase for cildrens ends------------

  parent componentDidMount()

<Parent>

<Parent/>class Component==>parent constructor ==>parent render ===> child constructor ===> child render ==>child componentDidMount ==> parent ComponentDidMOunt


Why ComponentDidMOunt()?
========================
Mounting is displaying the Component on DOM
TO make API calls

componentDidUpdate():
==================
when the user calls the [setState ] updation starts by updating the state variable.
React triggers the render() function once again
Then, after componentDidUpdate() is called.

componentWillUnmount():
=======================
Unmounting is removing the component from the DOM
when we move from one page to another page componentWillUnmount() will be called.

import React from "react";

class UserClass extends React.Component {
    constructor(props){
        super(props)
        console.log(props);

        this.state={
            userInfo:{
                name:"Dummy",
                location:"Default"
            }
        }
        console.log("construcor")
    }

    async componentDidMount(){
        const data= await fetch("https://api.github.com/users/Gouthami-D");
        const json= await data.json();
        
       
        this.setState({ 
            userInfo:json
        })
        
        console.log(json,"jsonS")
    }
    
    render(){

        const {login,id,avatar_url} =this.state.userInfo
        console.log("render")

        return(
            <> 
            <img src={avatar_url}/>
            <h2>{login}</h2>
            <h2>{id}</h2>
            </>
        )
    }
}

export default UserClass

==========Mounting===================
constructor(called with dummy data)
render(called with dummy data)
        <displays html dummy data on screen and dom>

componentDidMount()is called.
    We will Make an ApiCall
    <this.setState>--state variable is updated

======Mounting ends=========================

===========Updation=====================

  render(called with API data)
  <html> --displays html on screen with new API data

  componentDidUpdate() is called.

  ==========Updation Ends===================

=============Unmounting()===============
When we navigate to other pages componentWillUnmount() will be called at the end.



# _Chapter -08 Lets get Classy_

## Q1. How do you create `Nested Routes` react-router-dom configuration?

```javascript
const router = createBrowserRouter([// it is router for creating multiple routing
    {path:"parent", // it will show path routing
    element: "component",// it will show component for particular path
    errorElement:"error"// it will show path of error component if the routing path is not found
    children : [ // this will  show nested routes
        {
            path: "child", // routing path of child
            element: "child-component", // show child-component
            children : [
                {
                    path: "sub-child",
                    element: "sub-component",
                    children: [ // show nested routes inside  another route
                        {path: "", // it will perform similiar like another
                        element: "
                        },

                        {path: "",
                        element: ""
                        }
                    ]
                }
            ]

        }
    ]
    },
    {path:"another-parent", // it will similiar perform like first object
    element : "component"}
])
```

## Q2. Read abt `createHashRouter`, `createMemoryRouter` from React Router docs?

- `createHashRouter` : This router is useful if you are unable to configure your web server to direct all traffic to your React Router application. Instead of using normal URLs, it will use the hash (#) portion of the URL to manage the "application URL".[Read More]("https://reactrouter.com/en/main/routers/create-hash-router")

- `createMemoryRouter` : Instead of using the browser's history, a memory router manages its own history stack in memory. It's primarily useful for testing and component development tools like Storybook, but can also be used for running React Router in any non-browser environment.[Read More]("https://reactrouter.com/en/main/routers/create-memory-router")

## Q3. What is the order of `life cycle method` calls in `Class Based Components`?

This order is only for single `class based component`:

1. constructor()
2. render()
3. componentDidMount()
4. componentDidUpdate()
5. componentWillUnmount()

For more details [React-Lifecycle-methods-Diagram]("https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/")

## Q4. Why do we use `componentDidMount`?

The `componentDidMount()` method allows us to execute the React code when the component is already placed in the DOM (Document Object Model). This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered. Wwe can run any piece of react code to modify the components. For ex. It's the best place to make `API calls`.

## Q5. Why do we use `componentWillUnmount`? Show with example.

- `componentWillUnmount()` is useful for the cleanup of the application when we switch routes from one place to another. Since we are working with a SPA(Single Page Application) the component process always runs in the background even if we switch to another route. So it is required to stop those processes before leaving the page. If we revisit the same page, a new process starts that affects the browser performance.
- For example, In Repository class, during `componentDidMount()` a timer is set with an interval of every one second to print in console. When the component is unmounted (users moves to a different page), the timer will be running in the background, which we might not even realize and causing huge performance issue. To avoid such situations the cleanup function can be done in componentWillUnmount, in this example `clearInterval`(timer) to clear the timer interval before unmounting Repository component.

## Q6. (Research) Why do we use `super(props)` in constructor?

- `super(props)` is used to inherit the properties and access of variables of the React parent class when we initialize our component.
- super() is used inside constructor of a class to derive the parent's all properties inside the class that extended it. If super() is not used, then Reference Error : Must call super constructor in derived classes before accessing 'this' or returning from derived constructor is thrown in the console.
- The main difference between super() and super(props) is the this.props is undefined in child's constructor in super() but this.props contains the passed props if super(props) is used.

## Q7. (Research) Why can't we have the `callback function` of `useEffect async`?

`useEffect` expects it's callback function to return nothing or return a function (cleanup function that is called when the component is unmounted). If we make the callback function as `async`, it will return a `promise` and the promise will affect the clean-up function from being called.


Episode -9:OPtimization
===========
Single Responsibility Principle:
================================
Breaking our app into small components.
For example if we got a bug in one component we can easily catch the bug when our app is divided into seperate modules or components.
BUt if our app is not not divided into seperate components it is very hard to find the bug.
By this principle our application is scalable, testable,reusable,maintainable.

customHooks:
============
We implement custom hooks to seperate web logic and api logic
we seperate the api part from the component and write a custom hook for reusability.And reuse that logic wherever required.
We just import the custom hook wherever required.

chunking/Dynamic Bundling/code splitting/Lazy loading:
=========
Breaking the components into smaller chunks into different js files.

Lazy loading(On demand loading):
================================
When we have 2 components the app will pause the loading of other component. 
whenever the user goes and clicks that page then only that particular pages loads.

const Grocery=lazy(()=>import("./src/components/Grocery"))

Suspense:
=========
It is a component which is which takes fallback. It takes some time to load the component(navigate from home component to grocery component) between that time interval we show the fallback
 {
          path: "/grocery",
          element: <Suspense fallback={<h1>Loading..</h1>}><Grocery /></Suspense>
        }, 









